$comment
$**************************
*
* block comments
*
**************************$
$sample code


$variable declarations

define testVariable as 20

define testFunction as (testVariable) {
  display (+ "this is my testVariable" testVariable "\n")
  displayln
  result (+ testVariable 1)
}

$ loops and iterations
floop((define x as 0) (< x testVariable) (set x to (+ x 1))) {
    display x
}

define x as 0
wloop(< x testVariable)
  set x to (+ x 1)

$break?
wloop(true) {
  set x to (+ x 1)
  if(= x testVariable)
    break

}

$ arrays
define size as 10
define a as [1 2 3 4 5]
define b as allocate(size)  $how to do this?
$dynamically allocate size array?
floop((define temp as 0) (< x length(a)) set temp to (+ temp 1)) {
    display a[temp]
}
set a[4] to 9

$ conditionals
$**************************
* = x1 x2
* < x1 x2
* > x1 x2
* <= x1 x2
* >= x1 x2
* and x1 x2
* or x1 x2
* not x1
* != x
* abs x1
*
* if something is nil
**************************$
if (= a[0] 1)
  display "a[0] is 1"
elseif (<= a[0] 2)
  display "a[0] is <= 1"
elseif (> a[0] -1)
  display "a[0] is > -1"
elseif (and (= a[0] 1) (= b[0] 1))
  display "a[0] and b[0] are both 1"
elseif (or (> a[0] 1) (> b[0] 1))
  display "a[0] or b[0] is greater than 1"
elseif(not (< a[0] 1))
  display "a[0] is not < 1"
elseif(!= a[0] b[0])
  display "a[0] is not = to b[0]"
elseif(true)
  display "true keyword"
elseif(not false)
  display "false keyword"
elseif(true)
  (abs x1)
else
  nil


$ functions

define square as (x)  {
  result (* x x)
}

define list l as (1 2 3)

$ (define (map proc items)
$    (if (null? items)
$      nil
$      (cons (proc (car items)) (map (proc (cdr items))))))

$ map (lambda (x) (sscale S x)) @

define map as (func list) {
  if(not list)
    nil
  else
    cons(f(car list) map(f (cdr 1)))
}


define plus4 as (x)  {
result (+ x 4)
}

$equivalent to

define plus4  as () {
  lambda (x)  {
    result (+ x 4)
  }
}
$ need to do lambda
$function that returns a function
$ dispatch



$ lists
$ cons()
$ car()
$ cdr()

$ streams
$ scons()
$ scar()
$ scdr()
$ delay()
$ force()

real(arg) - coerces the numerical argument to type real
integer(arg) - coerces the numerical argument to type integer
display_env(arg) - displays the given environment
  To get the current environment, use the keyword this.
is_uninitialized(arg) - returns true if variable arg is UNINITIALIZED, false otherwise
is_array(arg) - returns true if arg is an array object, false otherwise
is_closure(arg) - returns true if arg is a closure object, false otherwise
is_boolean(arg) - returns true if arg is a boolean object, false otherwise
is_pair(arg) - returns true if arg is a pair, false otherwise
is_list(arg) - returns true if arg is a list object, false otherwise
is_nil(arg) - returns true if arg is nil, false otherwise
is_string(arg) - returns true if arg is a string, false otherwise
is_integer(arg) - returns true if arg is a integer number, false otherwise
is_real(arg) - returns true if arg is a real number, false otherwise
is_return(arg) - returns true if arg is a return object, false otherwise
