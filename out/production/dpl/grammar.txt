body            : O_BRACE statements C_BRACE

statements      : statement
                | statement statements

statement       : expression
                | definition
                | assignment
                | ifStatement
                | loopStatement
                | RESULT expression
                | comments

expression      : unary
                | binary

binary          : operator expression optBinaryItems

optBinaryItems  : expression optBinaryItems
                | *empty*

unary           : INTEGER
                | REAL
                | STRING
                | NEG_REAL
                | NEG_INTEGER
                | functionCall
                | lambda
                | list
                | object
                | O_PAREN expression C_PAREN
                //| EX_POINT unary  //! x1 operator not unary
                //| MINUS unary   //neg number? NEG_REAL and NEG_INTEGER
                | arrayInit

arrayInit       : O_BRACKET listItem C_BRACKET

object          : VARIABLE
                | VARIABLE DOT object

functionCall    : object list

lambda          : LAMBDA procedure

procedure       : list body

list            : O_PAREN listItem C_PAREN

listItem        : unary
                | unary listItem
                | NULL

definition	    : DEFINE object
                | DEFINE object defObj

defObj          : AS expression
                | AS procedure

assignment	    : SET object TO expression
                | SET object TO procedure

ifStatement     : IF unary optBlock optIfElse

optBlock        : body
                | statement

optIfElse       : NULL
                | elseStatement

elseStatement   : ELSE ifStatement
                | ELSE optBlock

loopStatement   : LOOP O_PAREN optVar unary optExp C_PAREN optBlock

optVar          : NULL
                | var

var             : VARIABLE unary

optExp          : NULL
                | expression

operator        : PLUS
                | MINUS
                | MULTIPLY
                | DIVIDE
                | EQUALS //=, numeric equality
                | LESS_THAN
                | GREATER_THAN
                | LTE // >=
                | GTE  // <=
                | INDEX //#   //how to handle array[x] lookup is # foo 2
                | AND
                | OR
                | NOT
                | EXPONENT
                | MODULO

comments        : DOLLAR_SIGN optBlockComment

optBlockComment : blockComment
                | oneLineComment

blockComment    : STAR *stuff* STAR DOLLAR_SIGN

oneLineComment  : *stuff* NEWLINE

//newline not needed? handled elsewhere?
displayOpt      : DISPLAY optDisplayItems
                | DISPLAYLN optDisplayItems NEWLINE

optDisplayItems : unary optDisplayItems