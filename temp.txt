define testVariable  as 20
define function testFunction  as [testVariable ] {
display (+ "this is my testVariable"  testVariable  "\n"  )
displayln
result (+ testVariable  1  )
}
loop(x  0 (< x  10  ) (++ x  ) )
display x

loop(x  0 (< x  10  ) (++ x  ) )
{
display x
}
loop((< x  10  ) )
{
display x
set x  to (+ x  1  )
}
loop((< x  10  ) (++ x  ) )
display x

loop((< x  10  ) (++ x  ) )
{
display x
}
loop(x  0 (< x  10  ) )
{
display x
set x  to (+ x  1  )
}
displayln
displayln
displayln
loop(temp  0 (< x  length [a ]  ) (+ temp  1  ) )
{
display # temp  x
}
if (= a [0 ]  1  ) {
display "a[0] is 1"
} else if (<= a [0 ]  2  ) {
display "a[0] is <= 1"
} else if (> a [0 ]  -1  ) {
display "a[0] is > -1"
} else if (and (= a [0 ]  1  )  (= b [0 ]  1  )  ) {
display "a[0] and b[0] are both 1"
} else if (or (> a [0 ]  1  )  (> b [0 ]  1  )  ) {
display "a[0] or b[0] is greater than 1"
} else if (not (< a [0 ]  1  )  ) {
display "a[0] is not < 1"
} else if (!= a [0 ]  b [0 ]  ) {
display "a[0] is not = to b[0]"
} else if (true ) {
display "true keyword"
} else if (not false  ) {
display "false keyword"
} else if (true ) {
abs
x1
} else {
nil
}
display
define function square  as [x ] {
result (* x  x  )
}
define l  as [1 2 3 ]
define function map  as [func list ] {
if (not list  ) nil
else display x

}
define function plus4  as [x ] {
result (+ x  4  )
}
define function plus4  as [] {
lambda [x ] {
result (+ x  4  )
}
}
define function plus4  as [] {
lambda [x ] {
result (+ x  4  )
}
}